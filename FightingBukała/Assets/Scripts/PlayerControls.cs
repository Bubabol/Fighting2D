//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""10beb4c4-29c8-441d-8b45-ff94e6b4f4b7"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""384e02ce-92a6-4fd6-a72f-614a79f7b64d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""770eb035-71cc-48bf-ac31-88449895f983"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""2a741ebc-ac39-4cf0-bf87-72e276116d8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""d2b539b8-d235-443c-a5c0-589580923ede"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eedaea9e-91bd-4e43-ab72-2fde3c75b85e"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e5693dd-e7f0-4246-8c21-9e6f58361112"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cffb17ba-bf16-402e-b849-06aa00ca53be"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e1c2796-648e-4e3d-9998-650520317b8d"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Movement2"",
            ""id"": ""353b36ca-70d9-44af-a05f-79f17e0feca6"",
            ""actions"": [
                {
                    ""name"": ""Move2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""64bb6dd3-6d4a-4ede-acd3-08d046bfe068"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump2"",
                    ""type"": ""Button"",
                    ""id"": ""e94648d2-31d1-43d2-952f-02f81926e23b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch2"",
                    ""type"": ""Button"",
                    ""id"": ""182b190c-b828-4449-9b3c-917c98dcfdfa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Punch2"",
                    ""type"": ""Button"",
                    ""id"": ""e36af6eb-5870-495f-9a31-9d17582ad9d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""808295fe-a8b5-4517-9e46-ab006e90aa4a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Move2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""016eb2a3-65de-489e-95bb-1cb0df3a6c13"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Jump2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d19f7718-8ac5-4bf2-a524-5775874f4600"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Crouch2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f2f59c2-bce2-4128-99ea-bb5f51e915ac"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Punch2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerControls"",
            ""bindingGroup"": ""PlayerControls"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        m_Movement_Crouch = m_Movement.FindAction("Crouch", throwIfNotFound: true);
        m_Movement_Punch = m_Movement.FindAction("Punch", throwIfNotFound: true);
        // Movement2
        m_Movement2 = asset.FindActionMap("Movement2", throwIfNotFound: true);
        m_Movement2_Move2 = m_Movement2.FindAction("Move2", throwIfNotFound: true);
        m_Movement2_Jump2 = m_Movement2.FindAction("Jump2", throwIfNotFound: true);
        m_Movement2_Crouch2 = m_Movement2.FindAction("Crouch2", throwIfNotFound: true);
        m_Movement2_Punch2 = m_Movement2.FindAction("Punch2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Move;
    private readonly InputAction m_Movement_Jump;
    private readonly InputAction m_Movement_Crouch;
    private readonly InputAction m_Movement_Punch;
    public struct MovementActions
    {
        private @PlayerControls m_Wrapper;
        public MovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputAction @Crouch => m_Wrapper.m_Movement_Crouch;
        public InputAction @Punch => m_Wrapper.m_Movement_Punch;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Crouch.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnCrouch;
                @Punch.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnPunch;
                @Punch.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnPunch;
                @Punch.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnPunch;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Punch.started += instance.OnPunch;
                @Punch.performed += instance.OnPunch;
                @Punch.canceled += instance.OnPunch;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Movement2
    private readonly InputActionMap m_Movement2;
    private IMovement2Actions m_Movement2ActionsCallbackInterface;
    private readonly InputAction m_Movement2_Move2;
    private readonly InputAction m_Movement2_Jump2;
    private readonly InputAction m_Movement2_Crouch2;
    private readonly InputAction m_Movement2_Punch2;
    public struct Movement2Actions
    {
        private @PlayerControls m_Wrapper;
        public Movement2Actions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move2 => m_Wrapper.m_Movement2_Move2;
        public InputAction @Jump2 => m_Wrapper.m_Movement2_Jump2;
        public InputAction @Crouch2 => m_Wrapper.m_Movement2_Crouch2;
        public InputAction @Punch2 => m_Wrapper.m_Movement2_Punch2;
        public InputActionMap Get() { return m_Wrapper.m_Movement2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Movement2Actions set) { return set.Get(); }
        public void SetCallbacks(IMovement2Actions instance)
        {
            if (m_Wrapper.m_Movement2ActionsCallbackInterface != null)
            {
                @Move2.started -= m_Wrapper.m_Movement2ActionsCallbackInterface.OnMove2;
                @Move2.performed -= m_Wrapper.m_Movement2ActionsCallbackInterface.OnMove2;
                @Move2.canceled -= m_Wrapper.m_Movement2ActionsCallbackInterface.OnMove2;
                @Jump2.started -= m_Wrapper.m_Movement2ActionsCallbackInterface.OnJump2;
                @Jump2.performed -= m_Wrapper.m_Movement2ActionsCallbackInterface.OnJump2;
                @Jump2.canceled -= m_Wrapper.m_Movement2ActionsCallbackInterface.OnJump2;
                @Crouch2.started -= m_Wrapper.m_Movement2ActionsCallbackInterface.OnCrouch2;
                @Crouch2.performed -= m_Wrapper.m_Movement2ActionsCallbackInterface.OnCrouch2;
                @Crouch2.canceled -= m_Wrapper.m_Movement2ActionsCallbackInterface.OnCrouch2;
                @Punch2.started -= m_Wrapper.m_Movement2ActionsCallbackInterface.OnPunch2;
                @Punch2.performed -= m_Wrapper.m_Movement2ActionsCallbackInterface.OnPunch2;
                @Punch2.canceled -= m_Wrapper.m_Movement2ActionsCallbackInterface.OnPunch2;
            }
            m_Wrapper.m_Movement2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move2.started += instance.OnMove2;
                @Move2.performed += instance.OnMove2;
                @Move2.canceled += instance.OnMove2;
                @Jump2.started += instance.OnJump2;
                @Jump2.performed += instance.OnJump2;
                @Jump2.canceled += instance.OnJump2;
                @Crouch2.started += instance.OnCrouch2;
                @Crouch2.performed += instance.OnCrouch2;
                @Crouch2.canceled += instance.OnCrouch2;
                @Punch2.started += instance.OnPunch2;
                @Punch2.performed += instance.OnPunch2;
                @Punch2.canceled += instance.OnPunch2;
            }
        }
    }
    public Movement2Actions @Movement2 => new Movement2Actions(this);
    private int m_PlayerControlsSchemeIndex = -1;
    public InputControlScheme PlayerControlsScheme
    {
        get
        {
            if (m_PlayerControlsSchemeIndex == -1) m_PlayerControlsSchemeIndex = asset.FindControlSchemeIndex("PlayerControls");
            return asset.controlSchemes[m_PlayerControlsSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnPunch(InputAction.CallbackContext context);
    }
    public interface IMovement2Actions
    {
        void OnMove2(InputAction.CallbackContext context);
        void OnJump2(InputAction.CallbackContext context);
        void OnCrouch2(InputAction.CallbackContext context);
        void OnPunch2(InputAction.CallbackContext context);
    }
}
